// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  email          String           @unique
  password_hash  String
  is_active      Boolean          @default(false)
  profiles       Profile[]
  devices        Device[]
  billingHistory BillingHistory[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@map("users")
}

model Profile {
  id            Int             @id @default(autoincrement())
  name          String
  user_id       Int
  user          User            @relation(fields: [user_id], references: [id])
  avatar        String?
  language_id   Int             @default(1)
  language      Language        @relation(fields: [language_id], references: [id])
  age           Int
  is_active     Boolean         @default(false)
  password_hash String
  is_main       Boolean
  subscriptions Subscription[]
  watchHistory  WatchHistory[]
  searchHistory SearchHistory[]
  ratings       Rating[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@map("profiles")
}

model Admin {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  password_hash String
  first_name    String
  last_name     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("admins")
}

model BillingHistory {
  id               Int           @id @default(autoincrement())
  user_id          Int
  user             User          @relation(fields: [user_id], references: [id])
  subscription_id  Int
  subscription     Subscription  @relation(fields: [subscription_id], references: [id])
  payment_method_id Int
  paymentMethod    PaymentMethod @relation(fields: [payment_method_id], references: [id])
  amount           Int
  status           String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@map("billing_history")
}

model Subscription {
  id                  Int              @id @default(autoincrement())
  profile_id          Int
  profile             Profile          @relation(fields: [profile_id], references: [id])
  plan_id             Int
  plan                SubscriptionPlan @relation(fields: [plan_id], references: [id])
  start_date          DateTime
  end_date            DateTime
  auto_renew          Boolean
  is_active           Boolean
  last_amount_paid    Int
  subscription_source String
  billingHistory      BillingHistory[]
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  @@map("subscriptions")
}

model PaymentMethod {
  id             Int              @id @default(autoincrement())
  name           String
  billingHistory BillingHistory[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@map("payment_methods")
}

model SubscriptionPlan {
  id               Int            @id @default(autoincrement())
  name             String
  description      String
  monthly_price    Int
  max_profile      Int
  max_screen       Int
  download_enabled Boolean
  ads_enabled      Boolean
  is_active        Boolean
  subscriptions    Subscription[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@map("subscription_plans")
}

model Language {
  id          Int          @id @default(autoincrement())
  name        String
  profiles    Profile[]
  audioTracks AudioTrack[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("languages")
}

model CategoryContent {
  id          Int      @id @default(autoincrement())
  category_id Int
  category    Category @relation(fields: [category_id], references: [id])
  content_id  Int
  content     Content  @relation(fields: [content_id], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("category_content")
}

model Category {
  id                Int               @id @default(autoincrement())
  name              String
  description       String
  parent_category_id Int
  parentCategory    Category?         @relation("CategoryToCategory", fields: [parent_category_id], references: [id])
  childCategories   Category[]        @relation("CategoryToCategory")
  contents          CategoryContent[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@map("categories")
}

model Content {
  id                Int               @id @default(autoincrement())
  title             String
  release_year      Int
  description       String
  duration          Int
  trailer_url       String
  average_rating    Float
  is_available      Boolean
  audio_id          Int
  audio             Audio             @relation("ContentToAudio", fields: [audio_id], references: [id])
  country_of_origin String
  categories        CategoryContent[]
  contentAudios     ContentAudio[]
  contentGenres     ContentGenre[]
  series            Series?
  ratings           Rating[]
  watchHistory      WatchHistory[]
  audios            Audio[]           @relation("AudioToContent")
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@map("contents")
}

model ContentAudio {
  id            Int        @id @default(autoincrement())
  audio_track_id Int
  audioTrack    AudioTrack @relation(fields: [audio_track_id], references: [id])
  content_id    Int
  content       Content    @relation(fields: [content_id], references: [id])
  is_main       Boolean
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("content_audio")
}

model Audio {
  id            Int          @id @default(autoincrement())
  audio_track_id Int          @unique
  audioTrack    AudioTrack?  @relation("AudioToMainTrack", fields: [audio_track_id], references: [id])
  content_id    Int
  content       Content      @relation("AudioToContent", fields: [content_id], references: [id])
  is_main       Boolean
  contents      Content[]    @relation("ContentToAudio")
  audioTracks   AudioTrack[] @relation("AudioToTracks")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("audio")
}

model AudioTrack {
  id            Int            @id @default(autoincrement())
  language_id   Int
  language      Language       @relation(fields: [language_id], references: [id])
  audio         Audio?         @relation("AudioToMainTrack")
  file_size     Int
  duration      Int
  contentAudios ContentAudio[]
  episodeAudios EpisodeAudio[]
  audios        Audio[]        @relation("AudioToTracks")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("audio_tracks")
}

model GenreImage {
  id        Int      @id @default(autoincrement())
  image_url String
  genre_id  Int
  genre     Genre    @relation(fields: [genre_id], references: [id])
  is_main   Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("genre_images")
}

model Genre {
  id            Int            @id @default(autoincrement())
  name          String
  description   String
  genreImages   GenreImage[]
  contentGenres ContentGenre[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("genres")
}

model ContentGenre {
  id         Int      @id @default(autoincrement())
  content_id Int
  content    Content  @relation(fields: [content_id], references: [id])
  genre_id   Int
  genre      Genre    @relation(fields: [genre_id], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("content_genres")
}

model Device {
  id           Int      @id @default(autoincrement())
  user_id      Int
  user         User     @relation(fields: [user_id], references: [id])
  device_type  String
  device_name  String
  ip_address   String
  last_active  DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("devices")
}

model SearchHistory {
  id           Int      @id @default(autoincrement())
  profile_id   Int
  profile      Profile  @relation(fields: [profile_id], references: [id])
  search_query String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("search_history")
}

model WatchHistory {
  id                Int      @id @default(autoincrement())
  profile_id        Int
  profile           Profile  @relation(fields: [profile_id], references: [id])
  content_id        Int
  content           Content  @relation(fields: [content_id], references: [id])
  episode_id        Int
  episode           Episode  @relation(fields: [episode_id], references: [id])
  watched_seconds   Int
  last_watched_time DateTime
  is_completed      Boolean
  content_type      String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("watch_history")
}

model Rating {
  id           Int      @id @default(autoincrement())
  content_id   Int
  content      Content  @relation(fields: [content_id], references: [id])
  profile_id   Int
  profile      Profile  @relation(fields: [profile_id], references: [id])
  rating_value Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("ratings")
}

model Series {
  id            Int      @id @default(autoincrement())
  content_id    Int      @unique
  content       Content  @relation(fields: [content_id], references: [id])
  total_seasons Int
  seasons       Season[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("series")
}

model Season {
  id             Int       @id @default(autoincrement())
  title          String
  series_id      Int
  series         Series    @relation(fields: [series_id], references: [id])
  description    String
  season_number  Int
  total_episodes Int
  episodes       Episode[]
  release_date   DateTime
  trailer_url    String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("seasons")
}

model Episode {
  id             Int            @id @default(autoincrement())
  duration       Int
  episode_number Int
  season_id      Int
  season         Season         @relation(fields: [season_id], references: [id])
  episodeAudios  EpisodeAudio[]
  watchHistory   WatchHistory[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@map("episodes")
}

model EpisodeAudio {
  id            Int        @id @default(autoincrement())
  episode_id    Int
  episode       Episode    @relation(fields: [episode_id], references: [id])
  audio_track_id Int
  audioTrack    AudioTrack @relation(fields: [audio_track_id], references: [id])
  is_main       Boolean
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("episode_audio")
}
