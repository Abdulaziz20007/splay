// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  email           String           @unique
  password_hash   String
  is_active       Boolean          @default(false)
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  profiles        Profile[]
  subscriptions   Subscription[]
  billing_history BillingHistory[]
}

model Admin {
  id             Int       @id @default(autoincrement())
  username       String    @unique
  email          String    @unique
  password_hash  String
  first_name     String
  last_name      String?
  is_active      Boolean   @default(true)
  is_creator     Boolean   @default(false)
}

model Profile {
  id            Int            @id @default(autoincrement())
  name          String
  user_id       Int
  avatar        String?
  language_id   Int
  age           Int?
  is_active     Boolean        @default(true)
  password_hash String?
  created_at    DateTime       @default(now())
  is_main       Boolean        @default(false)
  user          User           @relation(fields: [user_id], references: [id])
  language      Language       @relation(fields: [language_id], references: [id])
  subscriptions Subscription[]
}

model Language {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  profiles Profile[]
}

model Subscription {
  id                  Int               @id @default(autoincrement())
  profile_id          Int
  plan_id            Int
  user_id            Int
  start_date         DateTime          @default(now())
  end_date           DateTime?
  auto_renew         Boolean           @default(true)
  is_active          Boolean           @default(true)
  last_amount_paid   Decimal
  subscription_source String?
  profile            Profile           @relation(fields: [profile_id], references: [id])
  plan               SubscriptionPlans @relation(fields: [plan_id], references: [id])
  user               User              @relation(fields: [user_id], references: [id])
  billing_history    BillingHistory[]
}

model SubscriptionPlans {
  id                 Int            @id @default(autoincrement())
  name               String
  description        String?
  monthly_price      Decimal
  max_profile        Int
  max_screens        Int
  download_enabled   Boolean        @default(false)
  ads_enabled        Boolean        @default(false)
  is_active         Boolean        @default(true)
  subscriptions      Subscription[]
}

model BillingHistory {
  id                Int           @id @default(autoincrement())
  user_id          Int
  subscription_id   Int
  payment_method_id Int
  amount           Decimal
  date             DateTime      @default(now())
  status           BillingStatus
  subscription     Subscription  @relation(fields: [subscription_id], references: [id])
  payment_method   PaymentMethod @relation(fields: [payment_method_id], references: [id])
  user             User          @relation(fields: [user_id], references: [id])
}

model PaymentMethod {
  id              Int              @id @default(autoincrement())
  name            String
  billing_history BillingHistory[]
}

model Category {
  id                 Int               @id @default(autoincrement())
  name               String
  description        String?
  parent_category_id Int?
  parent_category    Category?         @relation("CategoryToCategory", fields: [parent_category_id], references: [id])
  sub_categories     Category[]        @relation("CategoryToCategory")
  category_content   CategoryContent[]
}

model CategoryContent {
  id          Int      @id @default(autoincrement())
  category_id Int
  content_id  Int
  category    Category @relation(fields: [category_id], references: [id])
}

model Genres {
  id           Int             @id @default(autoincrement())
  name         String
  description  String?
  genre_images GenreImages[]
  content_genres ContentGenres[]
}

model GenreImages {
  id        Int     @id @default(autoincrement())
  image_url String
  genre_id  Int
  is_main   Boolean @default(false)
  genre     Genres  @relation(fields: [genre_id], references: [id])
}

model ContentGenres {
  id         Int    @id @default(autoincrement())
  content_id Int
  genre_id   Int
  genre      Genres @relation(fields: [genre_id], references: [id])
}

enum BillingStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}